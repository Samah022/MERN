[{"C:\\Users\\samah\\OneDrive\\Desktop\\mernproject\\client\\src\\index.js":"1","C:\\Users\\samah\\OneDrive\\Desktop\\mernproject\\client\\src\\App.js":"2","C:\\Users\\samah\\OneDrive\\Desktop\\mernproject\\client\\src\\Auth.js":"3","C:\\Users\\samah\\OneDrive\\Desktop\\mernproject\\client\\src\\Info.js":"4"},{"size":815,"mtime":1689253199406,"results":"5","hashOfConfig":"6"},{"size":3836,"mtime":1689272139597,"results":"7","hashOfConfig":"6"},{"size":4847,"mtime":1689269628203,"results":"8","hashOfConfig":"6"},{"size":3740,"mtime":1689268235308,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hkn8du",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\samah\\OneDrive\\Desktop\\mernproject\\client\\src\\index.js",[],[],"C:\\Users\\samah\\OneDrive\\Desktop\\mernproject\\client\\src\\App.js",[],[],"C:\\Users\\samah\\OneDrive\\Desktop\\mernproject\\client\\src\\Auth.js",["23"],[],"import React from 'react';\r\nimport { useState } from 'react';\r\nimport Axios from 'axios';\r\nimport { useCookies } from 'react-cookie';\r\nimport Info from './Info';\r\n\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { Container, Form, Button } from 'react-bootstrap';\r\n\r\nconst Auth = () => {\r\n  const [cookies, setCookies] = useCookies(['access_token']); // Initialize access_token cookie\r\n  const [registered, setRegistered] = useState(false); // State variable to keep track of whether user is registered\r\n\r\n  /**\r\n   * Remove access_token cookie and adminID from local storage, then reload the page\r\n   */\r\n  const removeCookies = () => {\r\n    setCookies('access_token', '');\r\n    window.localStorage.removeItem('adminID');\r\n    window.location.reload(false);\r\n  };\r\n\r\n  /**\r\n   * Set registered state variable to true to switch to Login component\r\n   */\r\n  const handleRegister = () => {\r\n    setRegistered(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* Header section with navigation links */}\r\n      <header>\r\n        <nav>\r\n          <ul>\r\n            <li>\r\n              <a href=\"/\">Admin</a>\r\n            </li>\r\n            <li>\r\n              <a href=\"/app\">User</a>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n      </header>\r\n      <div>\r\n        {cookies.access_token ? (\r\n          <>\r\n            <Info />\r\n            <div className=\"text-center\">\r\n            <Button variant=\"danger\" onClick={removeCookies}>\r\n              Logout\r\n            </Button>\r\n            </div>\r\n          </>\r\n        ) : (\r\n          <>\r\n            {registered ? <Login /> : <Register handleRegister={handleRegister} />}\r\n          </>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n// Component for registering a new admin user\r\nconst Register = ({ handleRegister }) => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  /**\r\n   * Handle form submission and send POST request to register new admin\r\n   * @param e - Form submit event object\r\n   */\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    await Axios.post('http://localhost:3001/register', { username, password }); // Send POST request to register new admin\r\n    alert('Admin Created');\r\n    handleRegister(); // Call handleRegister function to switch to Login component\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Form className=\"form\" onSubmit={onSubmit}>\r\n        <h2 className=\"text-white\">Register</h2>\r\n        <div className=\"form-group\">\r\n          <Form.Control\r\n            type=\"text\"\r\n            id=\"username\"\r\n            value={username}\r\n            placeholder=\"username\"\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          ></Form.Control>\r\n          <br></br>\r\n          <Form.Control\r\n            type=\"password\"\r\n            id=\"password\"\r\n            value={password}\r\n            placeholder=\"password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          ></Form.Control>\r\n          <br></br>\r\n          <Button variant=\"success\" type=\"submit\">\r\n            Register\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\n// Component for logging in as an admin user\r\nconst Login = () => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  const [_, setCookies] = useCookies(['access_token']); // Initialize access_token cookie\r\n\r\n  /**\r\n   * Handle form submission and send POST request to login as admin\r\n   * @param e - Form submit event object\r\n   */\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const response = await Axios.post('http://localhost:3001/login', { username, password }); // Send POST request to login as admin\r\n    setCookies('access_token', response.data.token); // Set access_token cookie\r\n    window.localStorage.setItem('adminID', response.data.AdminID); // Set adminID in local storage\r\n    window.location.reload(false); // Reload the page\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Form className=\"form\" onSubmit={onSubmit}>\r\n        <h2 className=\"text-white\">Login</h2>\r\n        <div className=\"form-group\">\r\n          <Form.Control\r\n            type=\"text\"\r\n            id=\"username\"\r\n            value={username}\r\n            placeholder=\"username\"\r\n            onChange={(e) => setUsername(e.target.value)}\r\n          ></Form.Control>\r\n\r\n          <br></br>\r\n          <Form.Control\r\n            type=\"password\"\r\n            id=\"password\"\r\n            value={password}\r\n            placeholder=\"password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          ></Form.Control>\r\n          <br></br>\r\n          <Button variant=\"success\" type=\"submit\">\r\n            Login\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n\r\n","C:\\Users\\samah\\OneDrive\\Desktop\\mernproject\\client\\src\\Info.js",[],[],{"ruleId":"24","severity":1,"message":"25","line":117,"column":10,"nodeType":"26","messageId":"27","endLine":117,"endColumn":11},"no-unused-vars","'_' is assigned a value but never used.","Identifier","unusedVar"]